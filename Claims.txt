Title : Claims
Name : Divyanshu Chandra
Roll Number : 2001CS25
Declaration of authorship : I hereby certify that the information I am claiming is entirely my own original work except, where otherwise indicated.

This file contains all the claims that I have made regarding my submission


Files:
==========
# General Part : 

*All the files I submitted, asm.cpp, emu.cpp and claims.txt, have my name and roll number at the start.

The evidence for Assembler including the output files from the 4 + 1 test examples has also been uploaded. 
They are test1(3 output files), test2(2 output files), test3 (3 output file), test4.asm(3 output files) and 1 additional. All the test files have been tested and work properly. 

As for the evidence of emulator is uploaded with 5 output files (from trace option) for files assembled without errors. 

My source file compiles without error and creates a executable on using following command (g++ asm.cpp -o asm)

My source file compiles without warnings (g++ asm.cpp -o asm).

=============================
Program format and structure:
=============================

1. The assembler:

I have used consistent and sensible formatting with sensible program structure.

I have used sensible variable, function and type names with explanatory comments in the source code file (asm.cpp)

I have used a single process for both passes

I have successfully diagnosed label errors like duplicate, missing, invalid format 
I have successfully diagnosed instruction errors like no such instruction, invalid operand, unexpected operand 

I have successfully created advanced listing file for every test file
Format for Listing File :  ProgramCounter => MachineCode => Instruction 
(More details can be seen in testx.lst (x is from 1 to 4))

My source assembles all the provided test programs identifying appropraite errors, and if there are no errors it produces corressponding object 
file( Output for a valid input assembly program (.asm) will include : .log , .lst and .o files ) 

.log file contains => declared labels, used labels and errors
.lst file contains => listing file (format mentioned above)
.o file contains => object file contains machine code according to specification mentioned 

I have also implemented SET instruction. It is demonstrated through test3 program

2. The emulator :

I have implemented emulator using data structures to store all valid instructions(along with their format), memory (as machine_code and machine_code_int)

It loads object file and is with following options :

		Check Format : ./emu filename.o
		Emulator Input [options]
		-trace  show instruction trace
		-all	show all instructions
		-run	execute the program
		-dump 	show memory dump
		-help	show all options

It also detect errorneous programs if they have accessed memory location out of the boundary, or instruction opcode does not exists

I am assuming all SET and data instructions are after HALT in the provided assembly code 


=============================
Testing:
=============================

1. The assembler:

I have tested 5 examples shown as below. The errors only occurred in the file test2.asm and the program immediately stopped on the second
pass. The others were tested without any errors detected and produced three output files, listing file,error log file and machine readable object 
file, for each example. 


1)
#Input: asm test1.asm
#Output: 
a. test1.lst 
b. test1.log (without any error messages)
c. test1.o

2)
#Input:asm test2.asm
#Output: 
a. test2.lst
b. test2.log (with error messages shown as below but also in log file)

Errors
Line Number 4  Duplicate Label
Line Number 5  No Label Found
Line Number 6  Not Valid Operand
Line Number 7  Missing operand
Line Number 8  Incorrect number of operand
Line Number 9  Incorrect number of operand
Line Number 9  Not Valid Operand
Line Number 10 Label Not Alphanumeric
Line Number 11 Incorrect Instruction
Line Number 12 Incorrect Instruction

3)
#Input:asm test3.asm
#Output: 
a. test3.lst 
b. test3.log (without any error messages)
c. test3.o

4)
#Input:asm test4.asm 
#Output: 
a. test4.lst 
b. test4.log (without any error messages)
c. test4.o
# Bubble Sort Program :

#Input:asm BubbleSort.asm
#Output: 
a. BubbleSort.lst 
b. BubbleSort.log (without any error messages)
c. BubbleSort.o

# The emulator part :

I have tested in total 5 examples(including BubbleSort.o) from the given files test1.o needs to be aborted as it has infinite loop

The others were tested without any errors detected and produced excution data. I have the output data in the txt files which are uploaded.
(test1.txt(incomplete as it was aborted), test2.txt, test3.txt, test4.txt and BubbleSort.txt) 


1)
#Input: emu test1.o
Emulator Input: -all
#Output: manually aborted (infinite loop)

2)
#Input: emu test2.o
#Output: Error: No Object File Found

3)
#Input: emu test3.o
Emulator Input: -all
#Output: test3.txt

4)
#Input: emu test4.o
Emulator Input: -all
#Output: test4.txt

# Bubble Sort Program :

#Input: emu BubbleSort.o
Emulator Input: -all
#Output: BubbleSort.txt